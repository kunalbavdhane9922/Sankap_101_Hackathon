// package.json
{
  "name": "social-meida-dashboard",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "card": "^2.5.4",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.5"
  }
}

// README.md
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

// vite.config.js
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

// eslint.config.js
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

// index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

// src/App.jsx
// App.jsx
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Home from "./components/Home";
import Schedule from "./components/Schedule"
import Users from "./components/Users"
export default function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/schedule" element={<Schedule title="Schedule Posts" />} />
        <Route path="/users" element={<Users title="Users" />} />
        {/* <Route path="/income" element={<DummyPage title="Income" />} /> */}
        {/* <Route path="/billing" element={<DummyPage title="Billing" />} /> */}
        {/* <Route path="/settings" element={<DummyPage title="Settings" />} />  */}
      </Routes>
    </Router>
  );
}

// src/main.jsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

// src/components/Users.jsx
// ... existing code ...
// (The full content of src/components/Users.jsx goes here)
// ... existing code ...

// src/components/Users.css
// ... existing code ...
// (The full content of src/components/Users.css goes here)
// ... existing code ...

// src/components/Home.jsx
// ... existing code ...
// (The full content of src/components/Home.jsx goes here)
// ... existing code ...

// src/components/Schedule.jsx
// ... existing code ...
// (The full content of src/components/Schedule.jsx goes here)
// ... existing code ...

// src/components/Schedule.css
// ... existing code ...
// (The full content of src/components/Schedule.css goes here)
// ... existing code ...

// src/components/Slidebar.jsx
// ... existing code ...
// (The full content of src/components/Slidebar.jsx goes here)
// ... existing code ...

// src/backend/instagram.js
// Instagram API handler (mockup)
export default async function handler(req, res) {
  // In a real implementation, use access tokens and fetch from Instagram Graph API
  // For now, return mock data
  return res.json({
    name: 'mock_instagram_user',
    followers: '10,000',
    avatar: 'https://i.pravatar.cc/40?img=11',
    platform: 'Instagram',
    platformIcon: 'https://img.icons8.com/color/24/instagram-new.png',
    status: 'Active',
  });
} 

// src/backend/facebook.js
// Facebook API handler (mockup)
export default async function handler(req, res) {
  // In a real implementation, use access tokens and fetch from Facebook Graph API
  // For now, return mock data
  return res.json({
    name: 'mock_facebook_user',
    followers: '8,500',
    avatar: 'https://i.pravatar.cc/40?img=12',
    platform: 'Facebook',
    platformIcon: 'https://img.icons8.com/color/24/facebook-new.png',
    status: 'Active',
  });
} 

// src/backend/youtube.js
// YouTube API handler (mockup)
module.exports = (req, res) => {
  // In a real implementation, use access tokens and fetch from YouTube Data API
  // For now, return mock data
  res.json({
    name: 'mock_youtube_user',
    followers: '15,200',
    avatar: 'https://i.pravatar.cc/40?img=13',
    platform: 'YouTube',
    platformIcon: 'https://img.icons8.com/color/24/youtube-play.png',
    status: 'Active',
  });
};

// src/backend/twitter.js
// Twitter API handler (mockup)
export default async function handler(req, res) {
  // In a real implementation, use access tokens and fetch from Twitter API v2
  // For now, return mock data
  return res.json({
    name: 'mock_twitter_user',
    followers: '7,800',
    avatar: 'https://i.pravatar.cc/40?img=14',
    platform: 'X (Twitter)',
    platformIcon: 'https://img.icons8.com/color/24/twitter--v1.png',
    status: 'Active',
  });
} 